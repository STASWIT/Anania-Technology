<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨染云华技术站</title>
  
  
  <link href="http://anania.staswit.name/atom.xml" rel="self"/>
  
  <link href="http://anania.staswit.name/"/>
  <updated>2021-01-05T15:11:36.099Z</updated>
  <id>http://anania.staswit.name/</id>
  
  <author>
    <name>STASWIT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mirai-Webhook-Bridge 思路文档</title>
    <link href="http://anania.staswit.name/2021/01/04/Mirai-Webhook-Bridge-Docs/"/>
    <id>http://anania.staswit.name/2021/01/04/Mirai-Webhook-Bridge-Docs/</id>
    <published>2021-01-04T15:32:52.000Z</published>
    <updated>2021-01-05T15:11:36.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h2><p>[ws] /receiveMessage?pluginKey=pluginKey</p><p><code>请求</code></p><table><thead><tr><th align="center">名称</th><th align="center">类型</th><th align="center">可选</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">pluginKey</td><td align="center">string</td><td align="center">false</td><td align="center">插件的注册密钥</td><td align="center">“qwerty”</td></tr></tbody></table><p><code>响应</code></p><pre><code class="json">    &#123;        &quot;code&quot;:0,                                       // 状态码        &quot;errMsg&quot;:&quot;&quot;,                                    // 错误信息        &quot;sender&quot;:&#123;                                      // 发送者信息            &quot;fromGroup&quot;:&#123;                                               &quot;id&quot;:10000,                             // 群号                &quot;name&quot;:&quot;xxx&quot;,                           // 群名称                &quot;botPermission&quot;:&quot;owner&quot;                 // 机器人在群中的权限            &#125;,            &quot;id&quot;:1234567890,                            // 发送者账号            &quot;name&quot;:&quot;hello&quot;,                             // 发送者昵称（群中显示群名片）            &quot;permission&quot;:&quot;admin&quot;                        // 发送者权限        &#125;,        &quot;messageChain&quot;:[                                // 消息链            &#123;                &quot;msgID&quot;:10000,                          // 消息id                &quot;msgTime&quot;:22222,                        // 发送时间                &quot;msg&quot;:[                    &#123;                        &quot;type&quot;:&quot;plain&quot;,                 // 消息类型                        &quot;text&quot;:&quot;hello world&quot;,           // 消息内容                    &#125;,                    &#123;                        &quot;type&quot;:&quot;image&quot;,                        &quot;sources&quot;:&quot;https://example.com/&quot;                    &#125;                ]            &#125;        ]    &#125;</code></pre><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>[ws] /sendMessage</p><p><code>请求</code></p><pre><code class="json">    &#123;        &quot;pluginKey&quot;:&quot;qwerty&quot;,                           // 插件注册密钥        &quot;type&quot;: &quot;group&quot;,                                // 消息类型        &quot;target&quot;:10000,                                 // 发送到的号码        &quot;quote&quot;:0,                                      // 引用回复的消息id        &quot;messageChain&quot;:[                                            &#123;                &quot;msgID&quot;:0,                              // 消息id                &quot;msgTime&quot;:0,                            // 发送时间                &quot;msg&quot;:[                    &#123;                        &quot;type&quot;:&quot;plain&quot;,                 // 消息类型                        &quot;text&quot;:&quot;hello world&quot;            // 消息内容                    &#125;,                    &#123;                        &quot;type&quot;:&quot;image&quot;,                 // 消息类型                        &quot;localPath&quot;:&quot;&quot;,                 // 图片本地地址                        &quot;remoteURL&quot;:&quot;https://example.com/&quot;  // 图片远程地址                    &#125;                ]            &#125;        ]    &#125;</code></pre><p><code>响应</code></p><pre><code class="json">    &#123;        &quot;code&quot;:0,        &quot;errMsg&quot;:&quot;&quot;,        &quot;msgID&quot;:123456    &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h1&gt;&lt;h2 id=&quot;接收消息&quot;&gt;&lt;a href=&quot;#接收消息&quot; class=&quot;headerlink&quot; title=&quot;接收消息&quot;&gt;&lt;/a&gt;接收消</summary>
      
    
    
    
    <category term="墨可莉雅" scheme="http://anania.staswit.name/categories/%E5%A2%A8%E5%8F%AF%E8%8E%89%E9%9B%85/"/>
    
    
  </entry>
  
  <entry>
    <title>中缀表达式的转换和计算</title>
    <link href="http://anania.staswit.name/2020/12/13/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%92%8C%E8%AE%A1%E7%AE%97/"/>
    <id>http://anania.staswit.name/2020/12/13/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%92%8C%E8%AE%A1%E7%AE%97/</id>
    <published>2020-12-13T08:23:19.000Z</published>
    <updated>2021-01-05T14:24:28.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><pre><code class="cpp">    /*==============================================================================    *                            中缀表达式转后缀表达式    * ============================================================================*/    int toPostfixExpression(std::string infix)    &#123;        int expPoint = 0;        /*将表达式分解，依次入栈处理*/        for (expPoint = 0; expPoint &lt; infix.length(); expPoint++)        &#123;            if (isdigit(infix[expPoint]) != 0)            &#123;                /*如果是数字，直接入栈，如果是多位数，整合后入栈*/                if (expPoint != 0 &amp;&amp; isdigit(infix[expPoint - 1]) != 0)                &#123;                    tmpStr = infix[expPoint];                    tmpNum =                        atoi(expStack1.back().c_str()) * 10 +                        atoi(tmpStr.c_str());                    expStack1.pop_back();                    expStack1.push_back(std::to_string(tmpNum));                &#125;                else                &#123;                    tmpStr = infix[expPoint];                    expStack1.push_back(tmpStr);                &#125;            &#125;            else            &#123;                /*如果是运算符*/                if (opera.empty())                &#123;                    /*如果运算符栈是空栈，直接入栈*/                    opera.push_back(infix[expPoint]);                &#125;                else                &#123;                    /*如果不是空栈，判断上一个运算符*/                    switch (infix[expPoint]) // 第一级判断                    &#123;                    case &#39;+&#39;:                    case &#39;-&#39;:                        switch (opera.back()) // 加减第二级判断                        &#123;                        case &#39;+&#39;:                        case &#39;-&#39;:                            opera.push_back(infix[expPoint]);                            break;                        case &#39;*&#39;:                        case &#39;/&#39;:                        case &#39;d&#39;:                            tmpStr = opera.back();                            expStack1.push_back(tmpStr);                            opera.pop_back();                            opera.push_back(infix[expPoint]);                            break;                        case &#39;^&#39;:                            tmpStr = opera.back();                            expStack1.push_back(tmpStr);                            opera.pop_back();                            if (!opera.empty())                            &#123;                                switch (opera.back()) // 乘方第三级                                &#123;                                case &#39;+&#39;:                                case &#39;-&#39;:                                case &#39;(&#39;:                                    opera.push_back(infix[expPoint]);                                    break;                                case &#39;*&#39;:                                case &#39;/&#39;:                                case &#39;^&#39;:                                case &#39;d&#39;:                                    tmpStr = opera.back();                                    expStack1.push_back(tmpStr);                                    opera.pop_back();                                    opera.push_back(infix[expPoint]);                                    break;                                default:                                    break;                                &#125;                            &#125;                            else                            &#123;                                opera.push_back(infix[expPoint]);                            &#125;                            break;                        case &#39;(&#39;:                            opera.push_back(infix[expPoint]);                        default:                            break;                        &#125;                        break;                    case &#39;*&#39;:                    case &#39;/&#39;:                        switch (opera.back()) // 乘除第二级判断                        &#123;                        case &#39;+&#39;:                        case &#39;-&#39;:                        case &#39;*&#39;:                        case &#39;/&#39;:                            opera.push_back(infix[expPoint]);                            break;                        case &#39;d&#39;:                            tmpStr = opera.back();                            expStack1.push_back(tmpStr);                            opera.pop_back();                            opera.push_back(infix[expPoint]);                            break;                        case &#39;^&#39;:                            tmpStr = opera.back();                            expStack1.push_back(tmpStr);                            opera.pop_back();                            if (!opera.empty())                            &#123;                                switch (opera.back()) // 乘方第三级                                &#123;                                case &#39;+&#39;:                                case &#39;-&#39;:                                case &#39;*&#39;:                                case &#39;/&#39;:                                case &#39;(&#39;:                                    opera.push_back(infix[expPoint]);                                    break;                                case &#39;^&#39;:                                case &#39;d&#39;:                                    tmpStr = opera.back();                                    expStack1.push_back(tmpStr);                                    opera.pop_back();                                    opera.push_back(infix[expPoint]);                                    break;                                default:                                    break;                                &#125;                            &#125;                            else                            &#123;                                opera.push_back(infix[expPoint]);                            &#125;                            break;                        case &#39;(&#39;:                            opera.push_back(infix[expPoint]);                        default:                            break;                        &#125;                        break;                    case &#39;d&#39;:                        switch (opera.back()) // 掷骰第二级判断                        &#123;                        case &#39;+&#39;:                        case &#39;-&#39;:                        case &#39;*&#39;:                        case &#39;/&#39;:                        case &#39;d&#39;:                            opera.push_back(infix[expPoint]);                            break;                        case &#39;^&#39;:                            tmpStr = opera.back();                            expStack1.push_back(tmpStr);                            opera.pop_back();                            if (!opera.empty())                            &#123;                                switch (opera.back()) // 乘方第三级                                &#123;                                case &#39;+&#39;:                                case &#39;-&#39;:                                case &#39;*&#39;:                                case &#39;/&#39;:                                case &#39;d&#39;:                                case &#39;(&#39;:                                    opera.push_back(infix[expPoint]);                                    break;                                case &#39;^&#39;:                                    tmpStr = opera.back();                                    expStack1.push_back(tmpStr);                                    opera.pop_back();                                    opera.push_back(infix[expPoint]);                                    break;                                default:                                    break;                                &#125;                            &#125;                            else                            &#123;                                opera.push_back(infix[expPoint]);                            &#125;                            break;                        case &#39;(&#39;:                            opera.push_back(infix[expPoint]);                        default:                            break;                        &#125;                        break;                    case &#39;^&#39;:                    case &#39;(&#39;:                        opera.push_back(infix[expPoint]);                        break;                    case &#39;)&#39;:                        while (opera.back() != &#39;(&#39;)                        &#123;                            tmpStr = opera.back();                            expStack1.push_back(tmpStr);                            opera.pop_back();                        &#125;                        opera.pop_back();                        break;                    default:                        break;                    &#125;                &#125;            &#125;        &#125;        /*将临时栈的低位运算符按顺序放入表达式栈*/        for (size_t operaPos = opera.size(); operaPos &gt; 0; operaPos--)        &#123;            tmpStr = opera.back();            expStack1.push_back(tmpStr);            opera.pop_back();        &#125;        /*清空使用后的通用变量*/        //tmpNum = 0;        //tmpStr.clear();        return 0;    &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;中缀表达式转后缀表达式&quot;&gt;&lt;a href=&quot;#中缀表达式转后缀表达式&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转后缀表达式&quot;&gt;&lt;/a&gt;中缀表达式转后缀表达式&lt;/h2&gt;&lt;h3 id=&quot;原理分析&quot;&gt;&lt;a href=&quot;#原理分析&quot; class=&quot;</summary>
      
    
    
    
    <category term="墨可莉雅" scheme="http://anania.staswit.name/categories/%E5%A2%A8%E5%8F%AF%E8%8E%89%E9%9B%85/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://anania.staswit.name/2020/12/13/hello-world/"/>
    <id>http://anania.staswit.name/2020/12/13/hello-world/</id>
    <published>2020-12-13T03:01:44.871Z</published>
    <updated>2020-12-13T03:01:44.872Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
